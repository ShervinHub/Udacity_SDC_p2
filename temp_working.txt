import numpy as np
import cv2
import matplotlib.pyplot as plt
import matplotlib.image as mpimg





image = mpimg.imread('bridge_shadow.jpg')


def dir_threshold(img, sobel_kernel=3, angualr_thresh=(0, np.pi/2), color_threshold=(0, 255)):
    
    abs_x = abs_sobel_thresh(img, 'x', sobel_kernel, color_threshold)

    abs_y = abs_sobel_thresh(img, 'y', sobel_kernel, color_threshold)
    
    direction_g= np.arctan2(abs_y, abs_x)
    
    #scaled_sobel = np.uint8(255*magnitude/np.max(magnitude))
    
    dir_sbinary = np.zeros_like(abs_x)
    
    dir_sbinary[(direction_g >= angualr_thresh[0]) & (direction_g <= angualr_thresh[1])] = 1

    return dir_sbinary
    
    
def abs_sobel_thresh(img, orient='x', sobel_kernel=3, thresh_min=0, thresh_max=255, mono=False): # orinet x, y. suggested thress (20, 100)
    if orient=='x':
        sobel = cv2.Sobel(img, cv2.CV_64F, 1, 0, ksize=sobel_kernel) # Take the derivative in orient
    elif orient=='y':
        sobel = cv2.Sobel(img, cv2.CV_64F, 0, 1, ksize=sobel_kernel) # Take the derivative in orient
    else:
        raise Exception("orient parameter is not 'x' or 'y'")
    
    abs_sobel = np.absolute(sobel) # Absolute derivative
    
    scaled_sobel = np.uint8(255*abs_sobel/np.max(abs_sobel))
    
    # Threshold x gradient
    s_binary = np.zeros_like(scaled_sobel)
    
    if mono:
        s_binary[(scaled_sobel[:,:,0] >= 20) & (scaled_sobel[:,:,0] <= 100) | (scaled_sobel[:,:,2] >= 20) & (scaled_sobel[:,:,2] <= 100) | (scaled_sobel[:,:,1] >= 20) & (scaled_sobel[:,:,1] <= 100)]= 1
    else:
        s_binary[(scaled_sobel >= 20) & (scaled_sobel <= 100)]= 1

    return s_binary

def mag_thresh(img, sobel_kernel=3, mag_thresh=(0, 255)):
    
    sobel_x,sobel_y = cv2.Sobel(img, cv2.CV_64F, 1, 0,ksize=sobel_kernel), cv2.Sobel(img, cv2.CV_64F, 0, 1,ksize=sobel_kernel)

    magnitude = np.sqrt(sobel_x**2+sobel_y**2)
    
    scaled_sobel = np.uint8(255*magnitude/np.max(magnitude))
    

    
    mag_binary = np.zeros_like(scaled_sobel)
    
    mag_binary[(scaled_sobel >= mag_thresh[0]) & (scaled_sobel <= mag_thresh[1])] = 1
    
    return mag_binary

def color_threshold(img, color_threshold=(90, 255), channel='s'): # channels: r g b h l s. suggested thresholds: r(200,255), s((90,255) or (170,255), h(15, 100)


    ind_dict={'r':0, 'g':1, 'b':2,'h':0, 'l':1, 's':2}

    if channel in ['r', 'g', 'b']:
        
        chl = img[:,:,ind_dict[channel]]
    
    elif channel in ['h', 'l', 's']:
        
        chl = cv2.cvtColor(img, cv2.COLOR_RGB2HLS)[:,:,ind_dict[channel]]

    else:
        raise Exception("Channel unknown: "+channel)

    
    col_binary = np.zeros_like(chl)
    
    col_binary[(chl > color_threshold[0]) & (chl <= color_threshold[1])] = 1

    return col_binary





# Edit this function to create your own pipeline.
def pipeline(img, s_thresh=(170, 255), sx_thresh=(20, 100)):
    img = np.copy(img)
    
    col_bin=255*color_threshold(img, s_thresh, 's')
    
    mag_bin=255*mag_thresh(img, 3, (30, 100))
    
    dir_bin=255*dir_threshold(img,15, (0.7, 1.3))
    
    sobel_x_bin=255*abs_sobel_thresh(img,'x')
    
    sobel_y_bin=255*abs_sobel_thresh(img,'y')
    
    #color_binary = np.dstack(( np.zeros_like(sobel_y_bin), sobel_y_bin, dir_bin)) * 255
    
    ret = np.zeros_like(img)
    
    #ret[((sobel_y_bin == 1) & (sobel_x_bin == 1))] = 1
    
    #print (color_binary.shape)
    
    return sobel_y_bin
    
result = pipeline(image)

# Plot the result
f, (ax1, ax2) = plt.subplots(1, 2, figsize=(24, 9))
f.tight_layout()

ax1.imshow(image)
ax1.set_title('Original Image', fontsize=40)

ax2.imshow(result)
ax2.set_title('Pipeline Result', fontsize=40)
plt.subplots_adjust(left=0., right=1, top=0.9, bottom=0.)
